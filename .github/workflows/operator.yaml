name: "Operator"
on:
  pull_request:
    paths:
      - ".github/workflows/operator.yaml"
      - "ci/**"
      - "dask_kubernetes/operator/**"
      - "dask_kubernetes/common/**"
      - "dask_kubernetes/aiopykube/**"
      - "dask_kubernetes/*"
  push:
    paths:
      - ".github/workflows/operator.yaml"
      - "ci/**"
      - "dask_kubernetes/operator/**"
      - "dask_kubernetes/common/**"
      - "dask_kubernetes/aiopykube/**"
      - "dask_kubernetes/*"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint-chart:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Lint Helm Chart
        run: helm lint dask_kubernetes/operator/deployment/helm/dask-kubernetes-operator
      - name: Download Pluto
        uses: FairwindsOps/pluto/github-action@v5.11.1
      - name: Check for deprecated APIs
        run: helm template --include-crds dask-operator dask_kubernetes/operator/deployment/helm/dask-kubernetes-operator | pluto detect -

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10"]
        kubernetes-version: ["1.27.3"]
        include:
        - python-version: "3.10"
          kubernetes-version: "1.24.15"
        - python-version: "3.10"
          kubernetes-version: "1.25.11"
        - python-version: "3.10"
          kubernetes-version: "1.26.6"

    env:
      KUBECONFIG: .pytest-kind/pytest-kind/kubeconfig

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install deps
        run: ./ci/install-deps.sh
      - name: Run tests
        env:
          KUBERNETES_VERSION: ${{ matrix.kubernetes-version }}
          TEST_ISTIO: "true"
          TEST_DASK_GATEWAY: "true"
        run: pytest dask_kubernetes/common dask_kubernetes/operator dask_kubernetes/aiopykube
      - name: Debug k8s resources
        if: always()
        run: kubectl get all -A
